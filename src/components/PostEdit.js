import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getPostByAnId, editPost } from "../actions/PostActions";
import { POST_EDIT_RESET } from "../constants/PostConstants";
import "../styles/allStyles.css";
import uploadImage from "../uploadImage";
import { Link } from "react-router-dom";
import ErrorHandler from "./ErrorHandler";
import Loader from "./Loader";

function PostEdit({ history, match }) {
  const id = match.params.id;
  const [text, setText] = useState("");
  const [tags, setTags] = useState("");
  const [image, setImage] = useState("");
  const [checked, setChecked] = useState(true);
  const postDetails = useSelector((state) => state.postDetails);
  const editedPost = useSelector((state) => state.editPost);
  const { success, error } = editedPost;
  const { post, loading } = postDetails;
  const dispatch = useDispatch();

  const uploadNewImage = async (file) => {
    setChecked(false);
    const data = await uploadImage(file);
    if (data) {
      setImage(data);
      setChecked(true);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    let formatTags;
    if (!Array.isArray(tags)) {
      if (tags.length === 0) {
        formatTags = [];
      } else if (tags.indexOf(",") === -1) {
        formatTags = [tags];
      } else {
        formatTags = tags.split(",");
      }
    } else {
      formatTags = tags;
    }

    dispatch(editPost(id, text, image, formatTags));
  };

  useEffect(() => {
    if (success) {
      history.push(`/post/${id}`);
      dispatch({ type: POST_EDIT_RESET });
    } else {
      if (!post) {
        dispatch(getPostByAnId(id));
      } else {
        setText(post.text);
        setTags(post.tags);
        setImage(post.image);
      }
    }
  }, [dispatch, id, success, history, post]);

  return error ? (
    <ErrorHandler message={error} />
  ) : loading ? (
    <Loader />
  ) : (
    <>
      <Link to={`/post/${id}`}>
        <button className="btn">Go Back</button>
      </Link>
      <div className="form-container">
        <h4 className="form-heading">Edit Post</h4>
        <form onSubmit={(e) => handleSubmit(e)}>
          <label htmlFor="newText">Edit text: </label>
          <textarea
            type="text"
            rows="10"
            cols="30"
            name="newText"
            placeholder="Enter text..."
            value={text}
            onChange={(e) => setText(e.target.value)}
          />
          <label htmlFor="newTags">Edit tags (separate by comma): </label>

          <input
            type="text"
            name="newTags"
            placeholder="Enter tags..."
            value={tags}
            onChange={(e) => setTags(e.target.value)}
          />

          <label htmlFor="newImage">Upload an image: </label>

          <input
            type="file"
            name="newImage"
            placeholder="Upload an image"
            onChange={(e) => uploadNewImage(e.target.files[0])}
          />
          <button type="submit" disabled={!checked}>
            Submit
          </button>
        </form>
      </div>
    </>
  );
}

export default PostEdit;

// id: string(autogenerated)
// text: string(length: 6-50, preview only)
// image: string(url)
// likes: number(init value: 0)
// tags: array(string)
// publishDate: string(autogenerated)
// owner: object(User Preview)
